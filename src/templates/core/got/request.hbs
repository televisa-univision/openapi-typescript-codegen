{{>header}}

import got, { Response, OptionsOfUnknownResponseBody } from 'got';
import { types } from 'util';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import { OpenAPI } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>got/getHeaders}}


{{>got/getRequestBody}}


{{>got/sendRequest}}


{{>got/getResponseHeader}}


{{>got/getResponseBody}}


{{>functions/catchErrors}}


/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns Promise
 * @throws ApiError
 */
export function request<T>(options: ApiRequestOptions): CancelablePromise<T> {
    return new CancelablePromise(async (resolve, reject, onCancel) => {
        try {
            const url = getUrl(options);
            const response = await sendRequest(options, url, onCancel);
            const responseBody = await getResponseBody(response);
            const responseHeader = getResponseHeader(response, options.responseHeader);

            const result: ApiResult = {
                url,
                ok: true,
                status: response.statusCode,
                statusText: response.statusMessage || '',
                body: responseHeader || responseBody,
            };

            catchErrors(options, result);

            resolve(result.body);
        } catch (error) {
            reject(error);
        }
    });
}
