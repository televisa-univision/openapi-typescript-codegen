{{>header}}

import type { ApiRequestOptions } from './ApiRequestOptions';
import type { RequiredRetryOptions } from "got";
import { Agent as HttpsAgent } from "https";
import { Agent as HttpAgent } from "http";

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export interface Delays {
    lookup?: number;
    connect?: number;
    secureConnect?: number;
    socket?: number;
    response?: number;
    send?: number;
    request?: number;
}

type Config = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string>;
    USERNAME?: string | Resolver<string>;
    PASSWORD?: string | Resolver<string>;
    HEADERS?: Headers | Resolver<Headers>;
    ENCODE_PATH?: (path: string) => string;
    GOT_TIMEOUT?: Delays | number;
    GOT_RETRY?: Partial<RequiredRetryOptions> | number;
    HTTPS_AGENT?: HttpsAgent;
    HTTP_AGENT?: HttpAgent;
}

export const OpenAPI: Config = {
    BASE: '{{{server}}}',
    VERSION: '{{{version}}}',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
    GOT_TIMEOUT: undefined,
    GOT_RETRY: undefined,
    HTTPS_AGENT: undefined,
    HTTP_AGENT: undefined,
};

export type OpenAPIConfig = {
	BASE: string;
	VERSION: string;
	WITH_CREDENTIALS: boolean;
	CREDENTIALS: 'include' | 'omit' | 'same-origin';
	TOKEN?: string | Resolver<string>;
	USERNAME?: string | Resolver<string>;
	PASSWORD?: string | Resolver<string>;
	HEADERS?: Headers | Resolver<Headers>;
	ENCODE_PATH?: (path: string) => string;
};

export const OpenAPI: OpenAPIConfig = {
	BASE: '{{{server}}}',
	VERSION: '{{{version}}}',
	WITH_CREDENTIALS: false,
	CREDENTIALS: 'include',
	TOKEN: undefined,
	USERNAME: undefined,
	PASSWORD: undefined,
	HEADERS: undefined,
	ENCODE_PATH: undefined,
};
